#!/usr/bin/python
# -*- encoding: UTF-8 -*-
"""
lua local变量转table
create by tm
"""

import sys
import os
import re
if __name__ == "__main__":
    sys.path.append(os.path.split(os.path.realpath(__file__))[0] + "/..")
import common.ro_common_function as utilFunc
import common.file_util as file_util

class ProtoLuaLocalToTable():
    def __init__(self, stepName):
        self.name = stepName

    def __replaceWholeWord(self, original, wordToFind, replacement):
        p = re.compile(r"\b%s\b" % (wordToFind,))
        return p.sub(replacement, original)

    def __doLocalToTableOne(self, oldFilePath, newFilepath, filename):
        oldfile = open(oldFilePath, 'r')
        lineList = oldfile.readlines()
        oldfile.close()

        if not lineList[0] == "-- Generated By protoc-gen-lua Do not Edit\n":
            return False
        if lineList[1] == "-- Generated By python lua_local_to_table\n":
            return False
        msgNameList = []
        tablename = filename.replace(".lua", "Table")
        #修改第一行  添加local表;
        lineList[0] = lineList[0] + "-- Generated By python lua_local_to_table\n\nlocal " + tablename + " = {}\n\n";

        #寻找"protobuf.Message"
        for line in lineList:
            if line.startswith("local ") and (
                line.endswith(" = protobuf.Descriptor();\n") or
                line.endswith(" = protobuf.FieldDescriptor();\n") or
                line.endswith("protobuf.EnumDescriptor();\n") or
                line.endswith(" = protobuf.EnumValueDescriptor();\n")
                ):
                #找到这一行中 括号中的值
                begintag = "local "
                endtag = " = protobuf."
                begintagindex = line.find(begintag)
                #后半段
                part2 = line[begintagindex+len(begintag):]

                endtagindex = part2.find(endtag)
                #获取到需要的
                messageName = part2[0:endtagindex]
                msgNameList.append(messageName)

        #寻找 protobuf.Descriptor();
        for index,line in enumerate(lineList):
            if line.startswith("local ") and (
                line.endswith(" = protobuf.Descriptor();\n") or
                line.endswith(" = protobuf.FieldDescriptor();\n") or
                line.endswith("protobuf.EnumDescriptor();\n") or
                line.endswith(" = protobuf.EnumValueDescriptor();\n")
                ):
                lineList[index] = line.replace("local ","")

        #全局替换
        for index,line in enumerate(lineList):
            for msgname in msgNameList:
                if line and line.find(msgname) != -1:
                    #不是完整单词不能替换
                    #print lineList[index]
                    lineList[index] = self.__replaceWholeWord(lineList[index], msgname, tablename + "." + msgname)
        #存储
        newFile = open(newFilepath,'w')
        newFile.writelines(lineList)
        newFile.close()
        return True

    def __localToTableOne(self, luaInfo):
        oldFilePath = "%s/%s" % luaInfo
        newFilePath = oldFilePath

        if self.__doLocalToTableOne(oldFilePath, newFilePath, luaInfo[1]):
            utilFunc.printf("translate:%s" % newFilePath)
            return 1
        return 0

    def localToTable(self):
        # self.rootPath = commonDefine.CLIENT_PATH + '/src/'
        '''
        pathList = utilFunc.findFiles(commonDefine.LUA_PROTO_PATH, [".lua"])
        count = 0
        for path in pathList:
            count += self.__localToTableOne(path)
        utilFunc.log(self.name, str(count)+" completed.", True)
        '''
        self.__localToTableOne((file_util.get_lua_proto_path(), "proto_client_pb.lua"))
        return True

def doStep(argv):
    """把proto生成的lua文件中的local变量放到table里
        toolList:"lua_local_to_table"
        需求环境：无
        参数说明：无"""
    step = ProtoLuaLocalToTable(argv[0])
    return step.localToTable()

if __name__ == "__main__":
    doStep(["ProtoLuaLocalToTable"])
