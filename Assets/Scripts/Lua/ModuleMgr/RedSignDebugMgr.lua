---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dingshanchen.
--- DateTime: 2020/4/28 16:25
---
module("ModuleMgr.RedSignDebugMgr", package.seeall)

local l_mgr = MgrMgr:GetMgr("RedSignMgr")
--1：红点初始化成功
--2：红点被注册
--4：红点被移除注册
--3：红点被更新
local RedSignTreeLog = {}
local RedSignTreeSon = {}
local RedSignAccLog = {}
function AddRedSignTreeLog(node, count, isRedSign)

    local l_table = {
        count = count,
        isRedSign = isRedSign,
    }
    RedSignTreeLog[node] = l_table

end

--MgrMgr:GetMgr("RedSignDebugMgr").OutputRedSignTreeLog(1)
function OutputRedSignTreeLog(key, isRedSign)

    if not isRedSign then
        key = -key
    end
    if RedSignTreeLog[key] == nil then
        logYellow(math.abs(key) .. "：该检测方法/红点未主动更新过")
        return
    end
    local string = math.abs(key) .. "：当前检测方法/红点额外贡献红点数量：" .. RedSignTreeLog[key].count
    logYellow(string)

end

function AddTreeSon(key, son)

    if RedSignTreeSon[key] == nil then
        RedSignTreeSon[key] = {}
    end
    table.insert(RedSignTreeSon[key], son)

end

--输出当前红点详细信息，为什么亮或者不亮
--MgrMgr:GetMgr("RedSignDebugMgr").OutputRedSignTreeNode(1)
function OutputRedSignTreeNode(key, isRedSign)

    local l_onceSystemMgr = MgrMgr:GetMgr("OnceSystemMgr")
    if not isRedSign then
        logYellow("当前检测方法提供的红点数量：", l_mgr.RedSignTree[-key].count)
    else
        local string = "当前红点(" .. key .. ")提供的数量：" .. l_mgr.RedSignTree[key].count
        if l_onceSystemMgr.GetOnceState(l_onceSystemMgr.EClientOnceType.RedSign, key * 10000) then
            string = string .. "，但是由于当前红点被永久屏蔽，故不再显示"
        end
        logYellow(string)
        if not l_onceSystemMgr.GetOnceState(l_onceSystemMgr.EClientOnceType.RedSign, key * 10000) and RedSignTreeSon[key] then
            for j, v in pairs(RedSignTreeSon[key]) do
                string = "其中"
                if v < 0 then
                    string = string .. "检测方法("
                else
                    string = string .. "子红点("
                end
                string = string .. math.abs(v) .. ")有贡献：" .. l_mgr.RedSignTree[v].count
                if l_onceSystemMgr.GetOnceState(l_onceSystemMgr.EClientOnceType.RedSign, key * 10000 + v) then
                    string = string .. "，但是由于其被当前红点永久屏蔽，故最终贡献仍然为：0"
                end
                logYellow(string)
            end
        end
        if l_mgr.RedSignExCount[key] ~= nil then
            logYellow("红点额外数量（可能由服务器更新）：", l_mgr.RedSignExCount[key])
        end
    end

end

--输出还在队列中未执行的检测方法
--MgrMgr:GetMgr("RedSignDebugMgr").GetNeedUpdateRedSign()
function GetNeedUpdateRedSign()

    local l_table = l_mgr.GetNeedUpdateRedSign()
    local string = "队列长度：" .. #l_table .. "，" .. "当前还在队列中未执行的检测方法："
    for i, v in pairs(l_table) do
        string = string .. " " .. v
    end

end

--判断当前红点及其对应的检测方法（或红点本身）是否已经被永久屏蔽
--MgrMgr:GetMgr("RedSignDebugMgr").GetOnceStateHistory(89, 1000)
function GetOnceStateHistory(fa, son, sonIsRedSign)

    if son == nil then
        son = 0
    end
    if not sonIsRedSign then
        son = -son
    end
    if l_mgr.GetIgnoreState(fa, son) then
        logYellow("没有被屏蔽")
    else
        logYellow("已被屏蔽")
    end

end

--判断当前红点注册情况
--MgrMgr:GetMgr("RedSignDebugMgr").JudIsRegister(34)
function JudIsRegister(key)

    local l_table = l_mgr.GetRedSignRegister()
    if l_table[key] == nil or #l_table[key] == 0 then
        logYellow("当前红点(" .. key .. ")没有注册任何UI")
    else
        local string = "当前红点(" .. key .. ")注册了的UI有"
        for i, v in pairs(l_table[key]) do
            local l_parent
            if v.RedSignParent then
                l_parent = v.RedSignParent
            elseif v.ClickButton then
                l_parent = v.ClickButton.Transform
            elseif v.ClickTogEx then
                l_parent = v.ClickTogEx.Transform
            elseif v.ClickTog then
                l_parent = v.ClickTog.Transform
            elseif v.Listener then
                l_parent = v.Listener.Transform
            end
            string = string .. " " .. l_parent.name
        end
        logYellow(string)
    end

end

function AddRedSignAccLog(id, logLevel)

    if RedSignAccLog[id] == nil then
        RedSignAccLog[id] = {}
    end
    local l_nowTime = Common.TimeMgr.GetNowTimestamp()
    RedSignAccLog[id][logLevel] = l_nowTime

end

--MgrMgr:GetMgr("RedSignDebugMgr").OutputRedSignAccLog(33)
function OutputRedSignAccLog(id)

    if RedSignAccLog[id] == nil then
        logYellow("当前红点不存在于红点管理器（应该是表中没配）")
    else
        local l_nowTime = Common.TimeMgr.GetNowTimestamp()
        if RedSignAccLog[id][1] ~= nil then
            logYellow("当前红点存在于红点管理器")
        end
        if RedSignAccLog[id][2] ~= nil then
            logYellow("当前红点于 " .. l_nowTime - RedSignAccLog[id][2] .. " 秒前被最后一次注册")
        end
        if RedSignAccLog[id][3] ~= nil then
            logYellow("当前红点于 " .. l_nowTime - RedSignAccLog[id][3] .. " 秒前被最后一次取消注册")
        end
        if RedSignAccLog[id][4] ~= nil then
            logYellow("当前红点于 " .. l_nowTime - RedSignAccLog[id][4] .. " 秒前被最后一次在树上被更新")
        end
        if RedSignAccLog[id][5] ~= nil then
            logYellow("当前红点于 " .. l_nowTime - RedSignAccLog[id][5] .. " 秒前被最后一次用作显示")
        end
    end

end

function BeInit()

    RedSignTreeLog = {}
    RedSignTreeSon = {}
    RedSignAccLog = {}

end

return RedSignDebugMgr