---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by richardjiang.
--- DateTime: 2018/11/28 14:26
---
---@module ModuleMgr.DelegateModuleMgr
module("ModuleMgr.DelegateModuleMgr", package.seeall)

--缓存一个MedalData的引用
---@type ModuleData.DelegateModuleData
local l_delegateData = DataMgr:GetData("DelegateModuleData")

EventDispatcher = EventDispatcher.new()

--ACHIEVEREWARD = "ACHIEVEREWARD"       -- 领取奖励通知
--- 已经得知转盘奖励结果
REWARD_KNOWN = "REWARD_NOTICE"
COUNTINFO_CHANGE = "COUNTINFO_CHANGE" -- 次数变化通知
DELEGATE_UPDATE = "DELEGATE_UPDATE"   -- 委托信息变化
DELEGATE_RECOMMEND_ANIM = "DELEGATE_RECOMMEND_ANIM" --推荐动画
DELEGATE_RECONNECTED = "DELEGATE_RECONNECTED"
local sortKey = "DELEGATE_DAY_SORT"
local gameEventMgr = MgrMgr:GetMgr("GameEventMgr")

--- 推荐级别
EDelegateRecommendLevel = {
    None = 0,
    --- 推荐
    Lv1 = 1,
    --- 必做
    Lv2 = 2
}

function OnInit()
    Data.PlayerInfoModel.BASELV:Add(Data.onDataChange, OnBaseLvChange, ModuleMgr.DelegateModuleMgr)
    gameEventMgr.Register(gameEventMgr.OnBagUpdate, _onItemUpdate)

    --月卡开启事件监听
    local l_monthCardMgr = MgrMgr:GetMgr("MonthCardMgr")
    l_monthCardMgr.EventDispatcher:Add(l_monthCardMgr.ON_BUY_MONTHCARD_SUCCESS, function()
            l_delegateData.UpdateDelegateTimes()
        end, ModuleMgr.DelegateModuleMgr)
end

function OnUninit()
    Data.PlayerInfoModel.BASELV:RemoveObjectAllFunc(Data.onDataChange, ModuleMgr.DelegateModuleMgr)

    --月卡开启事件监听关闭
    local l_monthCardMgr = MgrMgr:GetMgr("MonthCardMgr")
    l_monthCardMgr.EventDispatcher:RemoveObjectAllFunc(l_monthCardMgr.ON_BUY_MONTHCARD_SUCCESS, ModuleMgr.DelegateModuleMgr)
end

function OnReconnected(reconnectData)
    EventDispatcher:Dispatch(DELEGATE_RECONNECTED)
end

function IsDelegateTaskCanTake(data)
    if data.taskId == 0 then
        return false
    end
    if IsDelegateFinish(data.id) then
        return false
    end
    return (MgrMgr:GetMgr("OpenSystemMgr").IsSystemOpen(data.systemId))
end

function OnSelectRoleNtf(info)
    l_delegateData.OnSelectRoleNtf(info.delegation)
end

---@param itemUpdateDataList ItemUpdateData[]
function _onItemUpdate(itemUpdateDataList)
    if nil == itemUpdateDataList then
        logError("[DelegateMgr] invalid param")
        return
    end

    local itemTID = nil
    for i = 1, #itemUpdateDataList do
        local singleUpdateInfo = itemUpdateDataList[i]
        if nil ~= singleUpdateInfo.NewItem then
            itemTID = singleUpdateInfo.NewItem.TID
        elseif nil ~= singleUpdateInfo.OldItem then
            itemTID = singleUpdateInfo.OldItem.TID
        else
            logError("[DelegateMgr] item update info list error")
        end

        if GameEnum.l_virProp.Certificates == itemTID then
            UpdateRedCheck()
        end
    end
end

function IsMedal(id)
    return array.contains(l_delegateData.crestMedalIds, id)
end

function SetMedal(id, count)
    l_delegateData.medals[id] = count
end

function GetMedal(id)
    return l_delegateData.medals[id] or 0
end

function OnLogout()
    l_delegateData.medals = {}
end

---@deprecated 请使用DumpDelegateReward
--function DumpReward(id, num)
--    logRed("DumpReward() id={0} num={1}", id, num)
--    g_reward = {}
--    g_reward.id = id
--    g_reward.num = num
--end

--- 判断委托奖励是否已知
---@return boolean true若已知且id不为空
function IsDelegateRewardKnown()
    return next(l_delegateData.DelegateWheelReward) ~= nil
end

--- 记录委托奖励信息
---@param rewardInfo ItemAwardNtfData 服务器返回的抽奖结果
function DumpDelegateReward(rewardInfo)
    if rewardInfo == nil or rewardInfo.awards == nil or rewardInfo.awards[1].items == nil then
        logError("[DelegateModuleMgr] 服务器返回的抽奖结果为空 ")
        return
    elseif #rewardInfo.awards[1].items ~= 1 then
        logError("[DelegateModuleMgr] 服务器返回的抽奖结果数量错误 ")
        return
    elseif rewardInfo.awards[1].items[1].item_id == nil or rewardInfo.awards[1].items[1].count == nil then
        logError("[DelegateModuleMgr] 服务器返回的抽奖结果不完整 ")
        return
    end

    if IsDelegateRewardKnown() then
        logWarn("[DelegateModuleMgr] 上次委托抽奖结果未清空，将被覆盖")
    end
    -- 若已存在委托抽奖记录也直接覆盖
    l_delegateData.DelegateWheelReward.id = rewardInfo.awards[1].items[1].item_id
    l_delegateData.DelegateWheelReward.num = rewardInfo.awards[1].items[1].count
end

--- 获取奖励道具id
---@return number 奖励道具ID，记录为空时为nil
function GetDelegateRewardID()
    if l_delegateData.DelegateWheelReward and l_delegateData.DelegateWheelReward.id then
        return l_delegateData.DelegateWheelReward.id
    else
        logError("[DelegateModuleMgr]委托奖励记录为空，但尝试获取奖励道具ID，请先判定" )
        -- return nil
    end
end

--- 获取奖励道具数量
---@return number 奖励道具数量，记录为空时为nil
function GetDelegateRewardNum()
    if l_delegateData.DelegateWheelReward and l_delegateData.DelegateWheelReward.num then
        return l_delegateData.DelegateWheelReward.num
    else
        logError("[DelegateModuleMgr]委托奖励记录为空，但尝试获取奖励道具数量" )
        -- return nil
    end
end

--- 清空委托奖励，置为空表
function CleanDelegateReward()
    l_delegateData.DelegateWheelReward = {}
end

--==============================--
--@Description:领奖
--@Date: 2018/12/4
--@Param: [args]
--@Return:
--==============================--
function TakeAward()
    local l_msgId = Network.Define.Rpc.DelegationAward
    ---@type NullArg
    local l_sendInfo = GetProtoBufSendTable("NullArg")
    Network.Handler.SendRpc(l_msgId, l_sendInfo)
end

--==============================--
--@Description:全量更新托信息更新
--@Date: 2018/12/4
--@Param: [args]
--@Return:
--==============================--
function OnDelegationRefresh(info)
    l_delegateData.OnDelegationRefresh(info)
    UpdateRedCheck()
    RefreshGuideInfo(true)
    EventDispatcher:Dispatch(DELEGATE_UPDATE)
    MEventMgr:LuaFireGlobalEvent(MEventType.MGlobalEvent_OnDelegateInfoUpdate)
end

--==============================--
--@Description:增量更新委托信息
--@Date: 2018/12/8
--@Param: [args]
--@Return:
--==============================--
function OnDelegationUpdate(info)
    local l_change, l_needTip = l_delegateData.OnDelegationUpdate(info)
    if l_change then  
        MEventMgr:LuaFireGlobalEvent(MEventType.MGlobalEvent_OnDelegateInfoUpdate)  --这个事件好像没地方接了 可以考虑去掉  20200709 cmd
    end
    if l_needTip then
        ShowMonthCardDelegateTips()
    end
    EventDispatcher:Dispatch(DELEGATE_UPDATE)
    UpdateRedCheck()
    RefreshGuideInfo()
end

--- 显示月卡特权加成Tips
function ShowMonthCardDelegateTips()
    if MgrMgr:GetMgr("MonthCardMgr").GetIsBuyMonthCard() then
        local l_value = TableUtil.GetGlobalTable().GetRowByName("MonthCardEntrustTicketRaise").Value
        local l_str = Lang("SHOW_DELEGATE_MONTHCARD_TIPS", l_value)
        MgrMgr:GetMgr("TipsMgr").ShowNormalTips(l_str)
        local l_chatMgr = MgrMgr:GetMgr("ChatMgr")
        local l_chatDataMgr = DataMgr:GetData("ChatData")
        --自己
        l_chatMgr.BoardCastMsg({
            channel = l_chatDataMgr.EChannel.SystemChat,
            lineType = l_chatDataMgr.EChatPrefabType.System,
            content = l_str,
            showInMainChat = false,
        })
    end
end

--==============================--
--@Description:次数限制变化通知
--@Date: 2018/12/7
--@Param: [args]
--@Return:
--==============================--
---@param countItemInfo CountItemInfo
function OnLimitCountRefresh(countItemInfo)
    local id = countItemInfo.id
    ---@type ClientDelegationData
    local l_delegate = array.find(l_delegateData.delegates, function(v)
        return id:equals(v.systemId)
    end)
    if l_delegate then
        l_delegate.finish_times = MLuaCommonHelper.Int(countItemInfo.count)
        l_delegate.isFinish = l_delegate.finish_times >= l_delegate.max_times and 1 or 0
        EventDispatcher:Dispatch(COUNTINFO_CHANGE, l_delegate.finish_times, l_delegate.max_times)
    end
    UpdateRedCheck()
end

--==============================--
--@Description:委托领奖回调
--@Date: 2018/12/4
--@Param: [args]
--@Return:
--==============================--
function OnTakeReward(msg)
    ---@type NullRes
    local l_info = ParseProtoBufToTable("NullRes", msg)
    if l_info.result ~= 0 then
        MgrMgr:GetMgr("TipsMgr").ShowNormalTips(Common.Functions.GetErrorCodeStr(l_info.result))
        return
    end
    l_delegateData.lastAwardTime = Common.TimeMgr.GetNowTimestamp()
end

function GetLeftAwardTimes(...)
    return l_delegateData.leftAwardTimes
end

function GetCertificatesCost(...)
    return l_delegateData.certificatesCost
end

function GetMaxCertificates(...)
    return l_delegateData.maxCertificates
end

function GetDelegateDatas()
    return l_delegateData.GetDelegateDatas()
end

function GetEmblemIds()
    return l_delegateData.crestMedalIds
end

--==============================--
--@Descriptiong:当天是否领过奖励
--@Date: 2018/12/4
--@Param: [args]
--@Return:
--==============================--
function HasTakeAwardToday()
    local ret = false
    if l_delegateData.lastAwardTime < 0 then
        return ret
    end
    local fiveTs = Common.TimeMgr.GetDayTimestamp(nil, { hour = 5 })
    return l_delegateData.lastAwardTime >= fiveTs
end

function CanTakeAward()
    return l_delegateData.certificatesCost >= l_delegateData.rewardBoxLimit
end

function GetCertifatesInfo()
    local l_coin = Data.BagModel:GetCoinOrPropNumById(GameEnum.l_virProp.Certificates)
    return l_coin, l_delegateData.maxCertificates
end

function GetNpcDelegateStatus(_, npcId)
    local l_status = l_delegateData.EDelegateStatus.Unknown
    local l_cNpcTb, l_finishTimes
    local l_ret = false
    local l_comUIMgr = Common.CommonUIFunc
    local function _hasDelegate(datas)
        local l_result = false
        if datas then
            for i, v in ipairs(datas) do
                l_finishTimes = GetFinishTime(v.id) or v.finish_times
                if l_finishTimes < v.max_times then
                    if v.taskId > 0 then
                        l_result = HasTaskByNpc(npcId)
                        if l_result then
                            l_status = v.status
                            break
                        end
                    else
                        l_cNpcTb = l_comUIMgr.GetNpcIdTbByFuncId(v.systemId)
                        if next(l_cNpcTb) then
                            l_result = table.ro_contains(l_cNpcTb, npcId)
                            if l_result then
                                l_status = v.status
                                break
                            end
                        end
                    end
                end
            end
        end
        return l_result
    end
    l_ret = _hasDelegate(l_delegateData.delegates)
    if not l_ret then
        l_ret = _hasDelegate(l_delegateData.expiredDelegates)
    end
    return l_status
end

--region 监听
function OnBaseLvChange()
    l_delegateData.InitCertificates()
    UpdateRedCheck()
end

--endregion

--==============================--
--@Description:获取委托次数信息
--@Date: 2018/12/6
--@Param: [args]
--@Return:
--==============================--
function GetDelegateTimesInfo(id)
    local l_delegate = array.find(l_delegateData.delegates, function(v)
        return v.id == id
    end)
    if l_delegate then
        return l_delegate.finish_times, l_delegate.max_times
    else
        logError("委托今日未开放: Major:{0}", id)
        return 0, 0
    end
end

--==============================--
--@Descriptions:根据dungeon id获取委托信息
--@Date: 2018/12/6
--@Param: [args]
--@Return:
--==============================--
function GetDelegateByDungeonId(dungeonId)
    if dungeonId > 0 then
        local l_delegate = array.find(l_delegateData.delegates, function(v)
            return v.dungeonId == dungeonId
        end)
        return l_delegate
    end
end

--==============================--
--@Descriptions:获取当前副本是否是委托副本
--@Date: 2018/12/6
--@Param: [args]
--@Return:
--==============================--
function ValidateDungeonIdIsDelegate(dungeonId)
    if dungeonId == 0 then
        return false
    end
    local l_cons = TableUtil.GetEntrustActivitiesTable().GetTable()
    if l_cons == nil then
        return false
    end
    for i = 1, #l_cons do
        if l_cons[i].DungeonID == dungeonId then
            return true
        end
    end
    return false
end

--==============================--
--@Description:根据taskId获取委托信息
--@Date: 2019/6/19
--@Param: [args]
--@Return:
--==============================--
function GetDelegateByTaskId(taskId)
    if taskId > 0 then
        local l_delegate = array.find(l_delegateData.delegates, function(v)
            return v.taskId == taskId
        end)
        return l_delegate
    end
end

--==============================--
--@Description:根据副本id获取进副本提示信息
--@Date: 2018/12/6
--@Param: [args]
--@Return:
--==============================--
function GetDungeonAgreeTip(dungeonId)
    local l_delegate = GetDelegateByDungeonId(dungeonId)
    if l_delegate then
        local curCertifates, _ = GetCertifatesInfo()
        if l_delegate.finish_times >= l_delegate.max_times then
            return Lang("DELEGATE_DUNGEON_AGREE_OUT_TIMES"), RoColorTag.Red
        elseif curCertifates < l_delegate.cost then
            return Lang("DELEGATE_DUNGEON_AGREE_NOT_ENOUGH", l_delegate.cost), RoColorTag.Red
        else
            return Lang("DELEGATE_DUNGEON_AGREE_COST", l_delegate.cost), RoColorTag.Green
        end
    end
end

function GetFinishTime(id)
    return l_delegateData.GetFinishTime(id)
end

--==============================--
--@Description:委托是否完成
--@Date: 2018/12/8
--@Param: [args]
--@Return:
--==============================--
function IsDelegateFinish(id)
    return l_delegateData.IsDelegateFinish(id)
end

--委托是否完成，根据真正的数据来处理，没有特判
function IsDelegateTrueFinish(id)
    local l_finishTime = GetFinishTime(id)
    local l_sdata = TableUtil.GetEntrustActivitiesTable().GetRowByMajorID(id)
    if not l_sdata then
        logError("find entrust activity l_sdata fail @戴瑞轩", id)
        return false
    end

    return l_finishTime >= l_sdata.ActivityTime
end

function AddTaskNpcInfo(info)
    table.insert(l_delegateData.taskNpcInfo, info)
    MEventMgr:LuaFireGlobalEvent(MEventType.MGlobalEvent_OnDelegateInfoUpdate)
end

function RemoveTaskInfo(info)
    array.removeall(l_delegateData.taskNpcInfo, function(v)
        return v.npcId == info.npcId and v.sceneId == info.sceneId and v.taskStatus == info.taskStatus
    end)
    MEventMgr:LuaFireGlobalEvent(MEventType.MGlobalEvent_OnDelegateInfoUpdate)
end

function HasTaskByNpc(npcId)
    return array.find(l_delegateData.taskNpcInfo, function(v)
        return v.npcId == npcId
    end)
end

--==============================--
--@Description:放弃委托任务的文字提示
--@Date: 2018/12/12
--@Param: [args]
--@Return:
--==============================--
function GetDelegateTaskGiveUpTips()
    return Lang("DELEGATE_TASK_GIVE_UP_TIP")
end

--==============================--
--@Description:获取委托参加等级
--@Date: 2018/12/12
--@Param: [args]
--@Return:
--==============================--
function GetDelegateJoinBaseLv(data)
    return l_delegateData.GetDelegateJoinBaseLv(data)
end

--==============================--
--@Description:根据任务id判断委托是否足够
--@Date: 2018/12/12
--@Param: [args]
--@Return:
--==============================--
function IsCertifatesEnough(taskId)
    local l_ret = true
    local l_delegate = array.find(l_delegateData.delegates, function(v)
        return v.taskId == taskId
    end)

    if l_delegate then
        local coin = Data.BagModel:GetCoinOrPropNumById(GameEnum.l_virProp.Certificates)
        l_ret = coin >= l_delegate.cost
    end

    return l_ret
end

function EnterDungeonAccordDelegate(id, callback)
    local l_delegate = array.find(l_delegateData.delegates, function(v)
        return v.dungeonId == id
    end)
    local l_showTip
    if l_delegate then
        local coin = Data.BagModel:GetCoinOrPropNumById(GameEnum.l_virProp.Certificates)
        if coin < l_delegate.cost then
            l_showTip = Lang("DELEGTE_DAILY_CERTIFICATES_NOT_ENOUTH")
        elseif IsDelegateFinish(id) then
            l_showTip = Lang("DELEGTE_DAILY_TIMES_NOT_ENOUTH")
        end
    end

    if l_showTip then
        CommonUI.Dialog.ShowYesNoDlg(true, nil, l_showTip, callback, nil, nil, 2, "DELEGATE_TIMES_EXHASTED")
    else
        if callback then
            callback()
        end
    end
end

function CheckRedSignMethod()
    local l_coin = Data.BagModel:GetCoinOrPropNumById(GameEnum.l_virProp.Certificates)
    for i, v in ipairs(l_delegateData.delegates) do
        if _isCanShowRedSignWithDelegateData(v, l_coin) then
            return 1
        end
    end

    return 0
end

function _isCanShowRedSignWithDelegateData(delegateData, certificates)

    if IsDelegateTrueFinish(delegateData.id) then
        return false
    end

    if certificates < delegateData.cost then
        return false
    end

    if MPlayerInfo.Lv < delegateData.lv then
        return false
    end

    return true
end

function CheckRedSignRewardMethod()
    if l_delegateData.leftAwardTimes > 0 then
        return 1
    end
    return 0
end

function UpdateRedCheck()
    local redMgr = MgrMgr:GetMgr("RedSignMgr")
    redMgr.UpdateRedSign(eRedSignKey.Delegate)
    redMgr.UpdateRedSign(eRedSignKey.DelegateAward)
end

function IsDelegateOpen(systemId)
    local ret = true
    if array.contains(l_delegateData.focusOpenSystemIds, systemId) then
        if array.find(l_delegateData.delegates, function(v)
            return v.systemId == systemId
        end) then
            ret = true
        else
            ret = false
        end
    end
    return ret
end

function RefreshGuideInfo(isRefresh)
    UserDataManager.SetDataFromLua("DELEGATE_HISTORY_COST", MPlayerSetting.PLAYER_SETTING_GROUP, tostring(l_delegateData.certificatesCost))
    if isRefresh then
        local l_historyRefresh = UserDataManager.GetStringDataOrDef("DELEGATE_HISTORY_REFRESH", MPlayerSetting.PLAYER_SETTING_GROUP, "0")
        l_historyRefresh = tonumber(l_historyRefresh) + 1
        UserDataManager.SetDataFromLua("DELEGATE_HISTORY_REFRESH", MPlayerSetting.PLAYER_SETTING_GROUP, l_historyRefresh)
    end
end

function IsHistroyCost(cost)
    cost = cost or 0
    local l_historyCost = UserDataManager.GetStringDataOrDef("DELEGATE_HISTORY_COST", MPlayerSetting.PLAYER_SETTING_GROUP, "0")
    l_historyCost = tonumber(l_historyCost)
    return l_historyCost >= cost
end

function IsHistroyRefresh()
    local l_historyRefresh = UserDataManager.GetStringDataOrDef("DELEGATE_HISTORY_REFRESH", MPlayerSetting.PLAYER_SETTING_GROUP, "0")
    l_historyRefresh = tonumber(l_historyRefresh)
    return l_historyRefresh > 1
end

function ShowItemAchievePlacePanel(id, callback)

    local l_sdata = TableUtil.GetEntrustActivitiesTable().GetRowByMajorID(id)
    if not l_sdata then
        return
    end

    if l_sdata.Position.Length > 1 then
        local l_sceneTb = {}
        local l_posTb = {}
        local j = 1
        while j <= l_sdata.Position.Length do
            local l_targetPosInfo = l_sdata.Position[j - 1]
            l_sceneTb[j] = l_targetPosInfo[0]
            l_posTb[j] = Vector3.New(l_targetPosInfo[1], l_targetPosInfo[2], l_targetPosInfo[3])
            j = j + 1
        end
        Common.CommonUIFunc.ShowItemAchievePlacePanel(l_sceneTb, l_posTb, function()
            if callback then
                callback()
            end
        end)
    end
end

function EnterTaskEvent(taskId, subTaskIds)
    MgrMgr:GetMgr("NpcTalkDlgMgr").CloseTalkDlg()
    local l_data = GetDelegateByTaskId(taskId)
    if not l_data then
        return
    end
    local l_sdata = TableUtil.GetEntrustActivitiesTable().GetRowByMajorID(l_data.id)
    if not l_sdata then
        logError("find entrust activity l_sdata fail @戴瑞轩", l_data.id)
        return
    end
    local l_expends = Common.Functions.VectorSequenceToTable(l_sdata.Cost)
    local l_cost = GetCertifatesInfo()
    local l_subTasks = {}
    local l_enough = false
    for i = 1, #l_expends do
        local l_expendId = l_expends[i][1]
        local l_expendCount = l_expends[i][2]
        local l_subTaskId = l_expends[i][3]
        for j = 1, #subTaskIds do
            if l_subTaskId == subTaskIds[j] then
                local l_task = {}
                l_task.taskId = l_subTaskId
                l_task.expendId = l_expendId
                l_task.expendCount = l_expendCount
                l_task.expendEnough = l_cost >= l_expendCount
                if l_task.expendEnough and not l_enough then
                    l_enough = true
                end
                table.insert(l_subTasks, l_task)
            end
        end
    end
    if not l_enough then
        MgrMgr:GetMgr("TipsMgr").ShowNormalTips(Lang("TASK_CAN_NOT_ACCEPT_TIP_4"))
        return
    end
    local l_uiData = {}
    l_uiData.taskId = taskId
    l_uiData.tips = l_sdata.ConfirmTips
    l_uiData.taskData = l_subTasks
    UIMgr:ActiveUI(UI.CtrlNames.DelegateBranch, l_uiData)
end

function GetSubTasksByTaskId(taskId)
    local l_data = GetDelegateByTaskId(taskId)
    if not l_data then
        return nil
    end
    local l_sdata = TableUtil.GetEntrustActivitiesTable().GetRowByMajorID(l_data.id)
    if not l_sdata then
        logError("find entrust activity l_sdata fail @戴瑞轩", l_data.id)
        return nil
    end
    local l_subTasks = {}
    local l_expends = Common.Functions.VectorSequenceToTable(l_sdata.Cost)
    for i = 1, #l_expends do
        table.insert(l_subTasks, l_expends[i][3])
    end
    return l_subTasks
end

return ModuleMgr.DelegateModuleMgr
