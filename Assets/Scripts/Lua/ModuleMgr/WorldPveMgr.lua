---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by richardjiang.
--- DateTime: 2018/9/27 16:46
---
---@module ModuleMgr.WorldPveMgr
module("ModuleMgr.WorldPveMgr", package.seeall)
EventDispatcher = EventDispatcher.new()

checkTimer = nil
todayCount = 0          -- 今日完成日次
todayMax = 0            -- 本日最多次数
-- weekCount = 0           -- 本周次数
-- weekMax = 0             -- 本周最多次数
worldEvents = nil       -- 当前世界任务
showRadious = 15        -- 显示半径
showObjs = {}           -- 小地图显示对象集合
enterSceneFlags = {}    -- 首次进入场景记录
eventId2TaskId = {}     -- 事件对应的任务
focusTasks = {}         -- 奇闻关注的任务
finishTasks = {}        -- 完成的奇闻任务
dis2Scale = 0.035
refreshTimer = nil
refreshCountDown = -1
lastPlayerPos = Vector2.zero
openMgr = nil
bubbleInterval = 0
worldEventNpcData = nil
npc = nil
mapFx = false
worldEventMarks = nil
WORLD_EVENT_SYSTEM_TIP = 60201
WORLD_EVENT_SYSTEM_TIP_LOGIN = 60202
function OnInit()
    GlobalEventBus:Add(EventConst.Names.TaskStatusUpdate, OnTaskStatusChange)
    worldEventMarks = {}
    bubbleInterval = 0
    InitCheckTimer()
    if worldEventNpcData == nil then
        worldEventNpcData = {}
        worldEventNpcData.sceneId = MGlobalConfig:GetInt("AssistNpcSceneID")
        worldEventNpcData.npcId = MGlobalConfig:GetInt("AssistNpcID")
    end
    local l_configBubble = MGlobalConfig:GetSequenceOrVectorInt("AssistNpcBubbleConfig")
    configBubbleShowTime = l_configBubble[0]
    configBubbleInterval = l_configBubble[1]
    mapFx = {}
end

function OnUnInit()
    if checkTimer then
        checkTimer:Stop()
        checkTimer = nil
    end
    npc = nil
    mapFx = nil
    worldEventMarks = nil
end

function OnLogout()
    enterSceneFlags = {}
    eventId2TaskId = {}
    focusTasks = {}
    finishTasks = {}
    bubbleInterval = 0
    worldEventMarks = {}
end

function OnEnterScene(sceneId)
    ClearShowObjs()

    if HasWorldPveInScene(sceneId) and MgrMgr:GetMgr("WorldMapInfoMgr").IsArrived(sceneId) then
        if not enterSceneFlags[sceneId] then
            enterSceneFlags[sceneId] = true
            MgrMgr:GetMgr("TipsMgr").ShowImportantNotice(Lang("WORLD_PVE_SCENE_FIRST_IN"))
        end
    end
end

function OnSelectRoleNtf(info)
    if info.roleworldevent then
        UpdateRoleWorldActivityInfo(info.roleworldevent)
    end

end

function OnAfterSelectRole( ... )
    if worldEvents and #worldEvents > 0 then
        MgrMgr:GetMgr("MessageRouterMgr").OnMessage(WORLD_EVENT_SYSTEM_TIP_LOGIN)
    end
end

function InitCheckTimer()
    if checkTimer then
        checkTimer:Stop()
        checkTimer = nil
    end
    checkTimer = Timer.New(function()
        OnTimeCheck()
    end, 0.2, -1)
    checkTimer:Start()
end

function OnTimeCheck()
    if not worldEvents or not next(worldEvents) then return end
    if  MScene.SceneID == worldEventNpcData.sceneId then
        if bubbleInterval <= 0 then
            bubbleInterval = configBubbleInterval
            if npc == nil then
                npc = MNpcMgr:FindNpcInViewport(worldEventNpcData.npcId)
            end
            MEventMgr:LuaFireEvent(MEventType.MEvent_PlayerChat,npc, StringEx.Format(Common.Utils.Lang("TIME_SEARCH_ASSIST_BUBBLE"),#worldEvents), 1,configBubbleShowTime)
        else
            bubbleInterval = bubbleInterval - 0.2
        end
    end
    local timets = Common.TimeMgr.GetNowTimestamp()
    for i = #worldEvents, 1, -1 do
        if tonumber(worldEvents[i].end_time) < timets then
            worldEventMarks[worldEvents[i].worldeventid] = nil
            MPlayerInfo:RemoveWorldEvent(worldEvents[i].worldeventid)
            table.remove(worldEvents, i)
        end
    end
end

function HasWorldPveInScene(id)
    local ret = false
    for i, v in ipairs(worldEvents or {}) do
        if v.sceneid == id then
            ret = true
            break
        end
    end
    return ret
end
function GetWorldPveInScene(id)
    local l_worldPveInfos={}
    for i, v in ipairs(worldEvents or {}) do
        if v.sceneid == id then
            table.insert(l_worldPveInfos,v)
        end
    end
    return l_worldPveInfos
end
function HasWorldPve()
    local ret = false
    for i, v in ipairs(worldEvents or {}) do
        ret = IsShowSmallWorldEventBg(v.worldeventid)
        if ret then
            break
        end
    end
    return ret
end

function GetWorldPveSceneNames()
    local ret = ""
    for i, v in ipairs(worldEvents or {}) do
        local sceneSdata = TableUtil.GetSceneTable().GetRowByID(v.sceneid)
        if sceneSdata then
            ret = ret .. sceneSdata.Comment .. (i < #worldEvents and ',' or "")
        end
    end
    return ret
end

--是否主动拉取世界任务标志
local l_reqedFlag = false
--==============================--
--@Description: 获取世界任务信息
--@Date: 2018/9/28
--@Param: [args]
--@Return:
--==============================--
function GetRoleWorldEvents()
    local l_msgId = Network.Define.Ptc.GetWorldPveEvent
    ---@type NullArg
    local l_sendInfo = GetProtoBufSendTable("NullArg")
    Network.Handler.SendPtc(l_msgId, l_sendInfo)

    --判断当前是否有数据 有的话直接打开 没有的话请求一次
    if HasWorldPve() then
        l_reqedFlag = false
        ShowWorldEventSign()
    else
        l_reqedFlag = true
    end
    return l_reqedFlag
end

--==============================--
--@Description: 世界任务刷新
--@Date: 2018/9/27
--@Param:   [args]
--@Return:
--==============================--
function OnRoleWorldEventNotify(msg)
    ---@type WorldEventNtf
    local l_info = ParseProtoBufToTable("WorldEventNtf", msg)
    worldEvents = l_info.allworldeventdb and l_info.allworldeventdb.all_events
    if worldEvents then
        ClearShowObjs()
        local taskMgr = MgrMgr:GetMgr("TaskMgr")
        for i, v in ipairs(worldEvents) do
            local taskId = GetEventTaskId(v.worldeventid)
            if taskId then
                focusTasks[taskId] = {
                    status = taskMgr.GetPreShowTaskStatusWithTaskId(taskId),
                    id = v.worldeventid,
                }
            end
        end
    end
    refreshCountDown = l_info.allworldeventdb and l_info.allworldeventdb.refreshcd or 0
    if #worldEvents > 0 and l_info.is_add_event then
        MgrMgr:GetMgr("MessageRouterMgr").OnMessage(WORLD_EVENT_SYSTEM_TIP)
    end

    --判断是否是主动请求 是的话需要操作对话结果
    if l_reqedFlag then
        if HasWorldPve() then
            --展示事件
            ShowWorldEventSign()
        else
            --提示当前没有
            MgrMgr:GetMgr("TipsMgr").ShowNormalTips(Common.Utils.Lang("WORLD_EVENT_SHOW_TIPS"))
            --更新对话内容
            CommandBlock.OpenAndRunBlock("CommandScript/NPC/11006", "eventquery_no")
        end
    end
    l_reqedFlag = false
end

--==============================-
--@Description: 活动完成次数刷新
--@Date: 2018/9/27
--@Param: [args]
--@Return:
--==============================--
function OnRoleWorldEventDBNotify(msg)
    ---@type RoleWorldEventDBNtf
    local l_info = ParseProtoBufToTable("RoleWorldEventDBNtf", msg)

    if l_info.roleworldeventdbinfo then
        UpdateRoleWorldActivityInfo(l_info.roleworldeventdbinfo)
    end
end

function UpdateRoleWorldActivityInfo(info)
    worldEventMarks = {}
    todayCount = info.todaycount
    todayMax = info.todaymax
    -- weekCount = info.weekcount
    -- weekMax = info.weekmax
    if info.event_sign_pair then
        for i, v in ipairs(info.event_sign_pair) do
            worldEventMarks[v.event_id] = v.sign
        end
    end

    finishTasks = {}
    if info.currentfinishedtaskid then
        for i, v in ipairs(info.currentfinishedtaskid) do
            table.insert(finishTasks, v.value)
        end
    end
    MgrMgr:GetMgr("WorldMapInfoMgr").OnWorldEventUpdate()
end

function IsWorldPveFinish()
    -- return todayCount >= todayMax or weekCount >= weekMax
    return todayCount >= todayMax
end

function OnUpdate()
    local player = MEntityMgr.PlayerEntity
    local sceneId = MScene.SceneID
    if IsNil(player) then return end
    if IsNil(player.Model.Trans) then return end
    if not MEntity.ValideEntityIncludeDead(player) then return end
    if not sceneId then return end
    if not worldEvents then return end
    local playerPos = Vector2(player.Position.x, player.Position.z)
    if lastPlayerPos ~= Vector2.zero and Vector2.Magnitude(playerPos, lastPlayerPos) < 0.1 then return end
    lastPlayerPos = playerPos
    local objPos, eventobjid
    for i, v in ipairs(worldEvents) do
        if v.sceneid == sceneId then
            objPos = Vector2(v.x, v.z)
            eventobjid = MLuaCommonHelper.ULong(v.eventobjid)
            if (playerPos - objPos):SqrMagnitude() < showRadious * showRadious then
                if not showObjs[v.eventobjid] then
                    showObjs[v.eventobjid] = true
                    MapObjMgr:AddObj(MapObjType.WorldEventCarrior, eventobjid, objPos)
                    if IsShowIconInMiniMap(v.worldeventid) then
                        MapObjMgr:AddObj(MapObjType.WorldEvent, eventobjid, objPos)
                        MapObjMgr:MdObj(MapObjType.WorldEvent, eventobjid, dis2Scale * showRadious, function(go, ed)
                            MgrMgr:GetMgr("TipsMgr").ShowQuestionTip(Lang("WORLD_EVENT_TASKICON_TIP"), ed, Vector2(1, 1))
                        end)
                    else
                        MapObjMgr:RmObj(MapObjType.WorldEventCarrior, eventobjid)
                        MapObjMgr:RmObj(MapObjType.WorldEvent, eventobjid)
                    end
                end
            else
                if showObjs[v.eventobjid] then
                    MapObjMgr:RmObj(MapObjType.WorldEventCarrior, eventobjid)
                    MapObjMgr:RmObj(MapObjType.WorldEvent, eventobjid)
                    showObjs[v.eventobjid] = nil
                end
            end
        end
    end
end

function UpdateMapObj(force)
end

function ClearShowObjs()
    if showObjs then
        for eventobjid, flag in pairs(showObjs) do
            MapObjMgr:RmObj(MapObjType.WorldEventCarrior, MLuaCommonHelper.ULong(eventobjid))
            MapObjMgr:RmObj(MapObjType.WorldEvent, MLuaCommonHelper.ULong(eventobjid))
        end
    end
    showObjs = {}
end

function CheckEventMarked(eventId)
    return worldEventMarks[eventId]
end

function CheckMapFx(eventId)
    return mapFx[eventId]
end

function RemoveMapFx(eventId)
    mapFx[eventId] = nil
end

function GetEventTaskId(eventId)
    local id = -1
    if eventId2TaskId[eventId] then
        return eventId2TaskId[eventId]
    end
    local sdata = TableUtil.GetWorldEventTable().GetRowByID(eventId)
    if sdata then
        eventId2TaskId[eventId] = sdata.LinkTaskID
        id = eventId2TaskId[eventId]
    end
    return id
end

function OnTaskStatusChange(taskId, status)
    if not focusTasks[taskId] then return end
    if focusTasks[taskId].status and focusTasks[taskId].status == status then return end

    focusTasks[taskId].status = status

    local player = MEntityMgr.PlayerEntity
    local sceneId = MScene.SceneID
    if IsNil(player) then return end
    if IsNil(player.Model.Trans) then return end
    if not MEntity.ValideEntityIncludeDead(player) then return end
    if not worldEvents then return end
    local eventobjid
    local playerPos = Vector2(player.Position.x, player.Position.z)
    for i, v in ipairs(worldEvents) do
        if v.sceneid == sceneId then
            local objPos = Vector2(v.x, v.z)
            if (playerPos - objPos):SqrMagnitude() < showRadious * showRadious then
                eventobjid = MLuaCommonHelper.ULong(v.eventobjid)
                if IsShowIconInMiniMap(v.worldeventid) then
                    MapObjMgr:AddObj(MapObjType.WorldEventCarrior, eventobjid, objPos)
                    MapObjMgr:AddObj(MapObjType.WorldEvent, eventobjid, objPos)
                    MapObjMgr:MdObj(MapObjType.WorldEvent, eventobjid, dis2Scale * showRadious, function(go, ed)
                        MgrMgr:GetMgr("TipsMgr").ShowQuestionTip(Lang("WORLD_EVENT_TASKICON_TIP"), ed, Vector2(1, 1))
                    end)
                else
                    MapObjMgr:RmObj(MapObjType.WorldEventCarrior, eventobjid)
                    MapObjMgr:RmObj(MapObjType.WorldEvent, eventobjid)
                end
            end
        end
    end
end

function GetTaskStatus(taskId)
    local taskMgr = MgrMgr:GetMgr("TaskMgr")
    local ret = taskMgr.ETaskStatus.CanTake
    if focusTasks[taskId] then
        return focusTasks[taskId].status
    end
    return ret
end

function IsShowSmallWorldEventBg(eventId)
    if not openMgr then openMgr = MgrMgr:GetMgr("OpenSystemMgr") end
    if not openMgr.IsSystemOpen(openMgr.eSystemId.WorldPve) then return false end
    local taskMgr = MgrMgr:GetMgr("TaskMgr")
    local ret = true
    local taskId = GetEventTaskId(eventId)
    local status = GetTaskStatus(taskId)
    ret = status ~= taskMgr.ETaskStatus.CanFinish and not array.contains(finishTasks, taskId) or false
    return ret
end

function IsShowIconInMiniMap(eventId)
    if not openMgr then openMgr = MgrMgr:GetMgr("OpenSystemMgr") end
    if not openMgr.IsSystemOpen(openMgr.eSystemId.WorldPve) then return false end
    local taskMgr = MgrMgr:GetMgr("TaskMgr")
    local ret = true
    local taskId = GetEventTaskId(eventId)
    local status = GetTaskStatus(taskId)
    ret = status ~= taskMgr.ETaskStatus.CanFinish and status ~= taskMgr.ETaskStatus.Taked and not array.contains(finishTasks, taskId) or false
    return ret
end

function IsFinishToday()
    return todayCount == todayMax and todayMax ~= 0
end

function RequestEventSign(eventIds)
    local l_msgId = Network.Define.Rpc.SetWorldEventSign
    local l_sendInfo = GetProtoBufSendTable("SetWorldEventSignArg")
    for i=1,#eventIds do
        l_sendInfo.event_id[i] = eventIds[i]
    end

    Network.Handler.SendRpc(l_msgId,l_sendInfo)
end

function OnResponseEventSgin(msg)
    local l_info = ParseProtoBufToTable("SetWorldEventSignRes", msg)
    if l_info.error_code ~= 0 then
        MgrMgr:GetMgr("TipsMgr").ShowNormalTips(Common.Functions.GetErrorCodeStr(l_info.error_code))
        return
    end
    if l_info.event_sign_pair then
        for i, v in ipairs(l_info.event_sign_pair) do
            worldEventMarks[v.event_id] = v.sign
        end
    end
    MgrMgr:GetMgr("WorldMapInfoMgr").OnWorldEventUpdate()
end

function ShowWorldEventSign()
    MgrMgr:GetMgr("NpcTalkDlgMgr").CloseTalkDlg()
    UIMgr:ActiveUI(UI.CtrlNames.WorldMap)
    local l_newEventIds = {}
    local l_sceneNames = nil
    for i, v in ipairs(worldEvents) do
        if not CheckEventMarked(v.worldeventid) then
            table.insert(l_newEventIds,v.worldeventid)
            mapFx[v.worldeventid] = true
            local l_sceneId = v.sceneid
            local l_scendData = TableUtil.GetSceneTable().GetRowByID(l_sceneId)
            if l_sceneNames == nil then
                l_sceneNames = l_scendData.MiniMap
            else
                l_sceneNames = l_sceneNames.."、"..l_scendData.MiniMap
            end
        end
    end
    if l_sceneNames ~= nil then
        MgrMgr:GetMgr("TipsMgr").ShowNormalTips(StringEx.Format(Common.Utils.Lang("WORLD_EVENT_SHOW_SIGN"),l_sceneNames))
    end

    if #l_newEventIds > 0 then
        RequestEventSign(l_newEventIds)
    end
end

function WorldEventHotToPlay( tipId )
    MgrMgr:GetMgr("NpcTalkDlgMgr").CloseTalkDlg()
    UIMgr:ActiveUI(UI.CtrlNames.Howtoplay, function(ctrl)
        ctrl:ShowPanel(tipId)
    end)
end

function NavigateToNpc( ... )
    MgrMgr:GetMgr("GuildMgr").GuildFindPath_NpcId(worldEventNpcData.npcId)
end

return ModuleMgr.WorldPveMgr