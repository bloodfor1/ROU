---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by richardjiang.
--- DateTime: 2018/8/24 14:31
---
require "Common.CoProcessor"

module("ModuleMgr", package.seeall)

---@class ModuleMgr.CoroutineMgr
CoroutineMgr = class("CoroutineMgr")
local proc = Co.CoProcessor.new()
local Time = Time

function CoroutineMgr:OnInit()
end

function CoroutineMgr:OnUnInit()
    proc:Reset()
end

function CoroutineMgr:OnUpdate()
    proc:Tick(Time.deltaTime)
end

--==============================--
--desc:增加一个全局协程
--time:2017-06-23 02:45:11
--@f:协程主函数
--@name:协程名称（可缺省）
--return 协程对象
--==============================--
function CoroutineMgr:addCo(f, name)
    return proc:Add(f, name)
end

--==============================--
--desc:通过协程对象移除全局协程
--time:2017-06-23 02:45:58
--@co:协程对象
--return
--==============================--
function CoroutineMgr:removeCo(co)
    proc:Remove(co)
end

--==============================--
--desc:通过协程名称移除协程
--time:2017-06-23 02:46:17
--@name:协程名称
--return
--==============================--
function CoroutineMgr:removeCoByName(name)
    proc:RemoveByName(name)
end

--==============================--
--desc:是否包含指定协程
--time:2017-11-03 11:30:57
--@co:协程
--return 是否包含指定协程
--==============================--
function CoroutineMgr:containsCo(co)
    return proc:Contains(co)
end

--==============================--
--desc:是否包含指定名称的协程
--time:2017-08-21 02:33:36
--@name:协程名称
--return 是否包含指定名称的协程
--==============================--
function CoroutineMgr:containsCoName(name)
    return proc:ContainsName(name)
end

--==============================--
--desc:通过名称查找协程
--time:2017-11-03 11:33:59
--@name:协程名称
--return 协程
--==============================--
function CoroutineMgr:getCoByName(name)
    return proc:GetByName(name)
end

--==============================--
--desc:创建任务队列处理器
--time:2017-08-07 06:43:08
--@f:处理函数，缺省为调用队列内的元素（函数）
--@queue:队列
--return 处理器，以非空对象调用表示加入队列，以nil调用表示终止处理
--==============================--
function CoroutineMgr:createTaskHandler(f, queue)
    f = f or function(task) task() end
    queue = queue or {}
    local co
    return function(task)
        if task then
            table.insert(queue, task)
            if not co or not self:containsCo(co) then
                co = self:addCo(function()
                    while #queue > 0 do
                        f(queue[1])
                        table.remove(queue, 1)
                    end
                end)
            end
        elseif co then
            self:removeCo(co)
        end
    end
end
