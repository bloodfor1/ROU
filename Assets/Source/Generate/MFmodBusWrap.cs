//this source code was auto-generated by tolua#, do not modify it
using System;
using MoonCommonLib;
using LuaInterface;

public class MFmodBusWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MFmodBus), typeof(System.Object));
		L.RegFunction("getID", getID);
		L.RegFunction("getPath", getPath);
		L.RegFunction("getVolume", getVolume);
		L.RegFunction("setVolume", setVolume);
		L.RegFunction("getPaused", getPaused);
		L.RegFunction("setPaused", setPaused);
		L.RegFunction("getMute", getMute);
		L.RegFunction("setMute", setMute);
		L.RegFunction("stopAllEvents", stopAllEvents);
		L.RegFunction("lockChannelGroup", lockChannelGroup);
		L.RegFunction("unlockChannelGroup", unlockChannelGroup);
		L.RegFunction("New", _CreateMFmodBus);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("bus", get_bus, null);
		L.RegVar("Deprecated", get_Deprecated, set_Deprecated);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMFmodBus(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FMOD.Studio.Bus arg0 = StackTraits<FMOD.Studio.Bus>.Check(L, 1);
				MFmodBus obj = new MFmodBus(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MFmodBus.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			System.Guid o = obj.getID();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			string o = obj.getPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			float arg0;
			float arg1;
			obj.getVolume(out arg0, out arg1);
			LuaDLL.lua_pushnumber(L, arg0);
			LuaDLL.lua_pushnumber(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.setVolume(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPaused(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			bool arg0;
			obj.getPaused(out arg0);
			LuaDLL.lua_pushboolean(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPaused(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.setPaused(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getMute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			bool arg0;
			obj.getMute(out arg0);
			LuaDLL.lua_pushboolean(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.setMute(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int stopAllEvents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.stopAllEvents(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int lockChannelGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			obj.lockChannelGroup();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int unlockChannelGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodBus obj = (MFmodBus)ToLua.CheckObject<MFmodBus>(L, 1);
			obj.unlockChannelGroup();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bus(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFmodBus obj = (MFmodBus)o;
			FMOD.Studio.Bus ret = obj.bus;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bus on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Deprecated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFmodBus obj = (MFmodBus)o;
			bool ret = obj.Deprecated;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Deprecated on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Deprecated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFmodBus obj = (MFmodBus)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Deprecated = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Deprecated on a nil value");
		}
	}
}

