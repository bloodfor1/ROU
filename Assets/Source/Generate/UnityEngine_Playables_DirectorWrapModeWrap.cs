//this source code was auto-generated by tolua#, do not modify it
using System;
using MoonCommonLib;
using LuaInterface;

public class UnityEngine_Playables_DirectorWrapModeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.Playables.DirectorWrapMode));
		L.RegVar("Hold", get_Hold, null);
		L.RegVar("Loop", get_Loop, null);
		L.RegVar("None", get_None, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<UnityEngine.Playables.DirectorWrapMode>.Check = CheckType;
		StackTraits<UnityEngine.Playables.DirectorWrapMode>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.Playables.DirectorWrapMode arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(UnityEngine.Playables.DirectorWrapMode), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hold(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Playables.DirectorWrapMode.Hold);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Loop(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Playables.DirectorWrapMode.Loop);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Playables.DirectorWrapMode.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.Playables.DirectorWrapMode o = (UnityEngine.Playables.DirectorWrapMode)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

