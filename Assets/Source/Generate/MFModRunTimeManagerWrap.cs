//this source code was auto-generated by tolua#, do not modify it
using System;
using MoonCommonLib;
using LuaInterface;

public class MFModRunTimeManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MFModRunTimeManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("PlayOneShot", PlayOneShot);
		L.RegFunction("PlayOneShotAttached", PlayOneShotAttached);
		L.RegFunction("CreateInstance", CreateInstance);
		L.RegFunction("GetEventDescription", GetEventDescription);
		L.RegFunction("LoadBank", LoadBank);
		L.RegFunction("UnloadBank", UnloadBank);
		L.RegFunction("GetBus", GetBus);
		L.RegFunction("GetVCA", GetVCA);
		L.RegFunction("AttachInstanceToGameObject", AttachInstanceToGameObject);
		L.RegFunction("DetachInstanceFromGameObject", DetachInstanceFromGameObject);
		L.RegFunction("AnyBankLoading", AnyBankLoading);
		L.RegFunction("WaitForAllLoads", WaitForAllLoads);
		L.RegFunction("PauseAllEvents", PauseAllEvents);
		L.RegFunction("MuteAllEvents", MuteAllEvents);
		L.RegFunction("AddListener", AddListener);
		L.RegFunction("PathToGUID", PathToGUID);
		L.RegFunction("EventExist", EventExist);
		L.RegFunction("Init", Init);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Deprecated", get_Deprecated, set_Deprecated);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayOneShot(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.PlayOneShot(arg0);
				return 0;
			}
			else if (count == 3)
			{
				MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				obj.PlayOneShot(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MFModRunTimeManager.PlayOneShot");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayOneShotAttached(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			obj.PlayOneShotAttached(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MoonCommonLib.IMFModEventInstance o = obj.CreateInstance(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEventDescription(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MoonCommonLib.IMFmodEventDescription o = obj.GetEventDescription(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBank(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.LoadBank(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.TextAsset>(L, 2))
			{
				MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
				UnityEngine.TextAsset arg0 = (UnityEngine.TextAsset)ToLua.ToObject(L, 2);
				obj.LoadBank(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, bool>(L, 2))
			{
				MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.LoadBank(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.TextAsset, bool>(L, 2))
			{
				MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
				UnityEngine.TextAsset arg0 = (UnityEngine.TextAsset)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.LoadBank(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MFModRunTimeManager.LoadBank");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadBank(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnloadBank(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MoonCommonLib.IMFmodBus o = obj.GetBus(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVCA(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			MoonCommonLib.IMFmodVCA o = obj.GetVCA(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttachInstanceToGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			MoonCommonLib.IMFModEventInstance arg0 = (MoonCommonLib.IMFModEventInstance)ToLua.CheckObject<MoonCommonLib.IMFModEventInstance>(L, 2);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 3);
			UnityEngine.Rigidbody arg2 = (UnityEngine.Rigidbody)ToLua.CheckObject<UnityEngine.Rigidbody>(L, 4);
			obj.AttachInstanceToGameObject(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DetachInstanceFromGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			MoonCommonLib.IMFModEventInstance arg0 = (MoonCommonLib.IMFModEventInstance)ToLua.CheckObject<MoonCommonLib.IMFModEventInstance>(L, 2);
			obj.DetachInstanceFromGameObject(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AnyBankLoading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			obj.AnyBankLoading();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForAllLoads(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			obj.WaitForAllLoads();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseAllEvents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.PauseAllEvents(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MuteAllEvents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.MuteAllEvents(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.AddListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PathToGUID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Guid o = obj.PathToGUID(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EventExist(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.EventExist(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModRunTimeManager obj = (MFModRunTimeManager)ToLua.CheckObject<MFModRunTimeManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Deprecated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFModRunTimeManager obj = (MFModRunTimeManager)o;
			bool ret = obj.Deprecated;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Deprecated on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Deprecated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFModRunTimeManager obj = (MFModRunTimeManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Deprecated = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Deprecated on a nil value");
		}
	}
}

