//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Collections.Generic;
using MoonCommonLib;
using LuaInterface;

public class DelegateFactoryOfDefault
{
	public delegate Delegate DelegateCreate(LuaFunction func, LuaTable self, bool flag);
	public static Dictionary<Type, DelegateCreate> dict = new Dictionary<Type, DelegateCreate>();
	static DelegateFactoryOfDefault factory = new DelegateFactoryOfDefault();

	public static void Init()
	{
		Register();
	}

	public static void Register()
	{
		dict.Clear();
		dict.Add(typeof(System.Action), factory.System_Action);
		dict.Add(typeof(UnityEngine.Events.UnityAction), factory.UnityEngine_Events_UnityAction);
		dict.Add(typeof(System.Predicate<int>), factory.System_Predicate_int);
		dict.Add(typeof(System.Action<int>), factory.System_Action_int);
		dict.Add(typeof(System.Comparison<int>), factory.System_Comparison_int);
		dict.Add(typeof(System.Func<int,int>), factory.System_Func_int_int);
		dict.Add(typeof(MoonCommonLib.LoadCallBack), factory.MoonCommonLib_LoadCallBack);
		dict.Add(typeof(MoonCommonLib.LoadSpritesCallBack), factory.MoonCommonLib_LoadSpritesCallBack);
		dict.Add(typeof(System.Action<System.Action>), factory.System_Action_System_Action);
		dict.Add(typeof(TMPro.TMP_InputField.OnValidateInput), factory.TMPro_TMP_InputField_OnValidateInput);
		dict.Add(typeof(DG.Tweening.TweenCallback), factory.DG_Tweening_TweenCallback);
		dict.Add(typeof(Spine.Unity.UpdateBonesDelegate), factory.Spine_Unity_UpdateBonesDelegate);
		dict.Add(typeof(Spine.Unity.SkeletonRenderer.InstructionDelegate), factory.Spine_Unity_SkeletonRenderer_InstructionDelegate);
		dict.Add(typeof(Spine.Unity.MeshGeneratorDelegate), factory.Spine_Unity_MeshGeneratorDelegate);
		dict.Add(typeof(Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate), factory.Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate);
		dict.Add(typeof(System.Func<string,bool>), factory.System_Func_string_bool);
		dict.Add(typeof(MoonCommonLib.ProcessExtractedFrame), factory.MoonCommonLib_ProcessExtractedFrame);

		DelegateTraits<System.Action>.Init(factory.System_Action);
		DelegateTraits<UnityEngine.Events.UnityAction>.Init(factory.UnityEngine_Events_UnityAction);
		DelegateTraits<System.Predicate<int>>.Init(factory.System_Predicate_int);
		DelegateTraits<System.Action<int>>.Init(factory.System_Action_int);
		DelegateTraits<System.Comparison<int>>.Init(factory.System_Comparison_int);
		DelegateTraits<System.Func<int,int>>.Init(factory.System_Func_int_int);
		DelegateTraits<MoonCommonLib.LoadCallBack>.Init(factory.MoonCommonLib_LoadCallBack);
		DelegateTraits<MoonCommonLib.LoadSpritesCallBack>.Init(factory.MoonCommonLib_LoadSpritesCallBack);
		DelegateTraits<System.Action<System.Action>>.Init(factory.System_Action_System_Action);
		DelegateTraits<TMPro.TMP_InputField.OnValidateInput>.Init(factory.TMPro_TMP_InputField_OnValidateInput);
		DelegateTraits<DG.Tweening.TweenCallback>.Init(factory.DG_Tweening_TweenCallback);
		DelegateTraits<Spine.Unity.UpdateBonesDelegate>.Init(factory.Spine_Unity_UpdateBonesDelegate);
		DelegateTraits<Spine.Unity.SkeletonRenderer.InstructionDelegate>.Init(factory.Spine_Unity_SkeletonRenderer_InstructionDelegate);
		DelegateTraits<Spine.Unity.MeshGeneratorDelegate>.Init(factory.Spine_Unity_MeshGeneratorDelegate);
		DelegateTraits<Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate>.Init(factory.Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate);
		DelegateTraits<System.Func<string,bool>>.Init(factory.System_Func_string_bool);
		DelegateTraits<MoonCommonLib.ProcessExtractedFrame>.Init(factory.MoonCommonLib_ProcessExtractedFrame);

		TypeTraits<System.Action>.Init(factory.Check_System_Action);
		TypeTraits<UnityEngine.Events.UnityAction>.Init(factory.Check_UnityEngine_Events_UnityAction);
		TypeTraits<System.Predicate<int>>.Init(factory.Check_System_Predicate_int);
		TypeTraits<System.Action<int>>.Init(factory.Check_System_Action_int);
		TypeTraits<System.Comparison<int>>.Init(factory.Check_System_Comparison_int);
		TypeTraits<System.Func<int,int>>.Init(factory.Check_System_Func_int_int);
		TypeTraits<MoonCommonLib.LoadCallBack>.Init(factory.Check_MoonCommonLib_LoadCallBack);
		TypeTraits<MoonCommonLib.LoadSpritesCallBack>.Init(factory.Check_MoonCommonLib_LoadSpritesCallBack);
		TypeTraits<System.Action<System.Action>>.Init(factory.Check_System_Action_System_Action);
		TypeTraits<TMPro.TMP_InputField.OnValidateInput>.Init(factory.Check_TMPro_TMP_InputField_OnValidateInput);
		TypeTraits<DG.Tweening.TweenCallback>.Init(factory.Check_DG_Tweening_TweenCallback);
		TypeTraits<Spine.Unity.UpdateBonesDelegate>.Init(factory.Check_Spine_Unity_UpdateBonesDelegate);
		TypeTraits<Spine.Unity.SkeletonRenderer.InstructionDelegate>.Init(factory.Check_Spine_Unity_SkeletonRenderer_InstructionDelegate);
		TypeTraits<Spine.Unity.MeshGeneratorDelegate>.Init(factory.Check_Spine_Unity_MeshGeneratorDelegate);
		TypeTraits<Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate>.Init(factory.Check_Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate);
		TypeTraits<System.Func<string,bool>>.Init(factory.Check_System_Func_string_bool);
		TypeTraits<MoonCommonLib.ProcessExtractedFrame>.Init(factory.Check_MoonCommonLib_ProcessExtractedFrame);

		StackTraits<System.Action>.Push = factory.Push_System_Action;
		StackTraits<UnityEngine.Events.UnityAction>.Push = factory.Push_UnityEngine_Events_UnityAction;
		StackTraits<System.Predicate<int>>.Push = factory.Push_System_Predicate_int;
		StackTraits<System.Action<int>>.Push = factory.Push_System_Action_int;
		StackTraits<System.Comparison<int>>.Push = factory.Push_System_Comparison_int;
		StackTraits<System.Func<int,int>>.Push = factory.Push_System_Func_int_int;
		StackTraits<MoonCommonLib.LoadCallBack>.Push = factory.Push_MoonCommonLib_LoadCallBack;
		StackTraits<MoonCommonLib.LoadSpritesCallBack>.Push = factory.Push_MoonCommonLib_LoadSpritesCallBack;
		StackTraits<System.Action<System.Action>>.Push = factory.Push_System_Action_System_Action;
		StackTraits<TMPro.TMP_InputField.OnValidateInput>.Push = factory.Push_TMPro_TMP_InputField_OnValidateInput;
		StackTraits<DG.Tweening.TweenCallback>.Push = factory.Push_DG_Tweening_TweenCallback;
		StackTraits<Spine.Unity.UpdateBonesDelegate>.Push = factory.Push_Spine_Unity_UpdateBonesDelegate;
		StackTraits<Spine.Unity.SkeletonRenderer.InstructionDelegate>.Push = factory.Push_Spine_Unity_SkeletonRenderer_InstructionDelegate;
		StackTraits<Spine.Unity.MeshGeneratorDelegate>.Push = factory.Push_Spine_Unity_MeshGeneratorDelegate;
		StackTraits<Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate>.Push = factory.Push_Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate;
		StackTraits<System.Func<string,bool>>.Push = factory.Push_System_Func_string_bool;
		StackTraits<MoonCommonLib.ProcessExtractedFrame>.Push = factory.Push_MoonCommonLib_ProcessExtractedFrame;
	}
    
    public static Delegate CreateDelegate(Type t, LuaFunction func = null)
    {
        DelegateCreate Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));            
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func);
            
            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }  
            else
            {
                Delegate d = Create(func, null, false);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func);
                return d;
            }       
        }

        return Create(null, null, false);        
    }
    
    public static Delegate CreateDelegate(Type t, LuaFunction func, LuaTable self)
    {
        DelegateCreate Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func, self);

            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }
            else
            {
                Delegate d = Create(func, self, true);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func, self);
                return d;
            }
        }

        return Create(null, null, true);
    }
    
    public static Delegate RemoveDelegate(Delegate obj, LuaFunction func)
    {
        LuaState state = func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld.func == func)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                break;
            }
        }

        return obj;
    }
    
    public static Delegate RemoveDelegate(Delegate obj, Delegate dg)
    {
        LuaDelegate remove = dg.Target as LuaDelegate;

        if (remove == null)
        {
            obj = Delegate.Remove(obj, dg);
            return obj;
        }

        LuaState state = remove.func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();        

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld == remove)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                state.DelayDispose(ld.self);
                break;
            }
        }

        return obj;
    }

	class System_Action_Event : LuaDelegate
	{
		public System_Action_Event(LuaFunction func) : base(func) { }
		public System_Action_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call()
		{
			try{
				func.Call();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf()
		{
			try{
				func.BeginPCall();
				func.Push(self);
				func.PCall();
				func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public System.Action System_Action(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action fn = delegate() { };
			return fn;
		}

		if(!flag)
		{
			System_Action_Event target = new System_Action_Event(func);
			System.Action d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_Event target = new System_Action_Event(func, self);
			System.Action d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action), L, pos);
	}

	void Push_System_Action(IntPtr L, System.Action o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_Events_UnityAction_Event : LuaDelegate
	{
		public UnityEngine_Events_UnityAction_Event(LuaFunction func) : base(func) { }
		public UnityEngine_Events_UnityAction_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call()
		{
			try{
				func.Call();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf()
		{
			try{
				func.BeginPCall();
				func.Push(self);
				func.PCall();
				func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public UnityEngine.Events.UnityAction UnityEngine_Events_UnityAction(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.Events.UnityAction fn = delegate() { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_Events_UnityAction_Event target = new UnityEngine_Events_UnityAction_Event(func);
			UnityEngine.Events.UnityAction d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_Events_UnityAction_Event target = new UnityEngine_Events_UnityAction_Event(func, self);
			UnityEngine.Events.UnityAction d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_Events_UnityAction(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.Events.UnityAction), L, pos);
	}

	void Push_UnityEngine_Events_UnityAction(IntPtr L, UnityEngine.Events.UnityAction o)
	{
		ToLua.Push(L, o);
	}

	class System_Predicate_int_Event : LuaDelegate
	{
		public System_Predicate_int_Event(LuaFunction func) : base(func) { }
		public System_Predicate_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public bool Call(int param0)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Boolean);
			}
		}

		public bool CallWithSelf(int param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Boolean);
			}
		}
	}

	public System.Predicate<int> System_Predicate_int(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Predicate<int> fn = delegate(int param0) { return false; };
			return fn;
		}

		if(!flag)
		{
			System_Predicate_int_Event target = new System_Predicate_int_Event(func);
			System.Predicate<int> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Predicate_int_Event target = new System_Predicate_int_Event(func, self);
			System.Predicate<int> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Predicate_int(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Predicate<int>), L, pos);
	}

	void Push_System_Predicate_int(IntPtr L, System.Predicate<int> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_int_Event : LuaDelegate
	{
		public System_Action_int_Event(LuaFunction func) : base(func) { }
		public System_Action_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(int param0)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(int param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public System.Action<int> System_Action_int(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<int> fn = delegate(int param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_int_Event target = new System_Action_int_Event(func);
			System.Action<int> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_int_Event target = new System_Action_int_Event(func, self);
			System.Action<int> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_int(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<int>), L, pos);
	}

	void Push_System_Action_int(IntPtr L, System.Action<int> o)
	{
		ToLua.Push(L, o);
	}

	class System_Comparison_int_Event : LuaDelegate
	{
		public System_Comparison_int_Event(LuaFunction func) : base(func) { }
		public System_Comparison_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public int Call(int param0, int param1)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Int32);
			}
		}

		public int CallWithSelf(int param0, int param1)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Int32);
			}
		}
	}

	public System.Comparison<int> System_Comparison_int(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Comparison<int> fn = delegate(int param0, int param1) { return 0; };
			return fn;
		}

		if(!flag)
		{
			System_Comparison_int_Event target = new System_Comparison_int_Event(func);
			System.Comparison<int> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Comparison_int_Event target = new System_Comparison_int_Event(func, self);
			System.Comparison<int> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Comparison_int(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Comparison<int>), L, pos);
	}

	void Push_System_Comparison_int(IntPtr L, System.Comparison<int> o)
	{
		ToLua.Push(L, o);
	}

	class System_Func_int_int_Event : LuaDelegate
	{
		public System_Func_int_int_Event(LuaFunction func) : base(func) { }
		public System_Func_int_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public int Call(int param0)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Int32);
			}
		}

		public int CallWithSelf(int param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Int32);
			}
		}
	}

	public System.Func<int,int> System_Func_int_int(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Func<int,int> fn = delegate(int param0) { return 0; };
			return fn;
		}

		if(!flag)
		{
			System_Func_int_int_Event target = new System_Func_int_int_Event(func);
			System.Func<int,int> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Func_int_int_Event target = new System_Func_int_int_Event(func, self);
			System.Func<int,int> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Func_int_int(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Func<int,int>), L, pos);
	}

	void Push_System_Func_int_int(IntPtr L, System.Func<int,int> o)
	{
		ToLua.Push(L, o);
	}

	class MoonCommonLib_LoadCallBack_Event : LuaDelegate
	{
		public MoonCommonLib_LoadCallBack_Event(LuaFunction func) : base(func) { }
		public MoonCommonLib_LoadCallBack_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.Object param0, object param1, uint param2)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(UnityEngine.Object param0, object param1, uint param2)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public MoonCommonLib.LoadCallBack MoonCommonLib_LoadCallBack(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			MoonCommonLib.LoadCallBack fn = delegate(UnityEngine.Object param0, object param1, uint param2) { };
			return fn;
		}

		if(!flag)
		{
			MoonCommonLib_LoadCallBack_Event target = new MoonCommonLib_LoadCallBack_Event(func);
			MoonCommonLib.LoadCallBack d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			MoonCommonLib_LoadCallBack_Event target = new MoonCommonLib_LoadCallBack_Event(func, self);
			MoonCommonLib.LoadCallBack d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_MoonCommonLib_LoadCallBack(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(MoonCommonLib.LoadCallBack), L, pos);
	}

	void Push_MoonCommonLib_LoadCallBack(IntPtr L, MoonCommonLib.LoadCallBack o)
	{
		ToLua.Push(L, o);
	}

	class MoonCommonLib_LoadSpritesCallBack_Event : LuaDelegate
	{
		public MoonCommonLib_LoadSpritesCallBack_Event(LuaFunction func) : base(func) { }
		public MoonCommonLib_LoadSpritesCallBack_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.Material param0, UnityEngine.Sprite[] param1, object param2)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(UnityEngine.Material param0, UnityEngine.Sprite[] param1, object param2)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public MoonCommonLib.LoadSpritesCallBack MoonCommonLib_LoadSpritesCallBack(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			MoonCommonLib.LoadSpritesCallBack fn = delegate(UnityEngine.Material param0, UnityEngine.Sprite[] param1, object param2) { };
			return fn;
		}

		if(!flag)
		{
			MoonCommonLib_LoadSpritesCallBack_Event target = new MoonCommonLib_LoadSpritesCallBack_Event(func);
			MoonCommonLib.LoadSpritesCallBack d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			MoonCommonLib_LoadSpritesCallBack_Event target = new MoonCommonLib_LoadSpritesCallBack_Event(func, self);
			MoonCommonLib.LoadSpritesCallBack d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_MoonCommonLib_LoadSpritesCallBack(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(MoonCommonLib.LoadSpritesCallBack), L, pos);
	}

	void Push_MoonCommonLib_LoadSpritesCallBack(IntPtr L, MoonCommonLib.LoadSpritesCallBack o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_System_Action_Event : LuaDelegate
	{
		public System_Action_System_Action_Event(LuaFunction func) : base(func) { }
		public System_Action_System_Action_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(System.Action param0)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(System.Action param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public System.Action<System.Action> System_Action_System_Action(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<System.Action> fn = delegate(System.Action param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_System_Action_Event target = new System_Action_System_Action_Event(func);
			System.Action<System.Action> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_System_Action_Event target = new System_Action_System_Action_Event(func, self);
			System.Action<System.Action> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_System_Action(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<System.Action>), L, pos);
	}

	void Push_System_Action_System_Action(IntPtr L, System.Action<System.Action> o)
	{
		ToLua.Push(L, o);
	}

	class TMPro_TMP_InputField_OnValidateInput_Event : LuaDelegate
	{
		public TMPro_TMP_InputField_OnValidateInput_Event(LuaFunction func) : base(func) { }
		public TMPro_TMP_InputField_OnValidateInput_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public char Call(string param0, int param1, char param2)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			char ret = (char)func.CheckNumber();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Char);
			}
		}

		public char CallWithSelf(string param0, int param1, char param2)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			char ret = (char)func.CheckNumber();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Char);
			}
		}
	}

	public TMPro.TMP_InputField.OnValidateInput TMPro_TMP_InputField_OnValidateInput(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			TMPro.TMP_InputField.OnValidateInput fn = delegate(string param0, int param1, char param2) { return '\0'; };
			return fn;
		}

		if(!flag)
		{
			TMPro_TMP_InputField_OnValidateInput_Event target = new TMPro_TMP_InputField_OnValidateInput_Event(func);
			TMPro.TMP_InputField.OnValidateInput d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			TMPro_TMP_InputField_OnValidateInput_Event target = new TMPro_TMP_InputField_OnValidateInput_Event(func, self);
			TMPro.TMP_InputField.OnValidateInput d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_TMPro_TMP_InputField_OnValidateInput(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(TMPro.TMP_InputField.OnValidateInput), L, pos);
	}

	void Push_TMPro_TMP_InputField_OnValidateInput(IntPtr L, TMPro.TMP_InputField.OnValidateInput o)
	{
		ToLua.Push(L, o);
	}

	class DG_Tweening_TweenCallback_Event : LuaDelegate
	{
		public DG_Tweening_TweenCallback_Event(LuaFunction func) : base(func) { }
		public DG_Tweening_TweenCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call()
		{
			try{
				func.Call();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf()
		{
			try{
				func.BeginPCall();
				func.Push(self);
				func.PCall();
				func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public DG.Tweening.TweenCallback DG_Tweening_TweenCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			DG.Tweening.TweenCallback fn = delegate() { };
			return fn;
		}

		if(!flag)
		{
			DG_Tweening_TweenCallback_Event target = new DG_Tweening_TweenCallback_Event(func);
			DG.Tweening.TweenCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			DG_Tweening_TweenCallback_Event target = new DG_Tweening_TweenCallback_Event(func, self);
			DG.Tweening.TweenCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_DG_Tweening_TweenCallback(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(DG.Tweening.TweenCallback), L, pos);
	}

	void Push_DG_Tweening_TweenCallback(IntPtr L, DG.Tweening.TweenCallback o)
	{
		ToLua.Push(L, o);
	}

	class Spine_Unity_UpdateBonesDelegate_Event : LuaDelegate
	{
		public Spine_Unity_UpdateBonesDelegate_Event(LuaFunction func) : base(func) { }
		public Spine_Unity_UpdateBonesDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Unity.ISkeletonAnimation param0)
		{
			try{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(Spine.Unity.ISkeletonAnimation param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public Spine.Unity.UpdateBonesDelegate Spine_Unity_UpdateBonesDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			Spine.Unity.UpdateBonesDelegate fn = delegate(Spine.Unity.ISkeletonAnimation param0) { };
			return fn;
		}

		if(!flag)
		{
			Spine_Unity_UpdateBonesDelegate_Event target = new Spine_Unity_UpdateBonesDelegate_Event(func);
			Spine.Unity.UpdateBonesDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			Spine_Unity_UpdateBonesDelegate_Event target = new Spine_Unity_UpdateBonesDelegate_Event(func, self);
			Spine.Unity.UpdateBonesDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_Spine_Unity_UpdateBonesDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(Spine.Unity.UpdateBonesDelegate), L, pos);
	}

	void Push_Spine_Unity_UpdateBonesDelegate(IntPtr L, Spine.Unity.UpdateBonesDelegate o)
	{
		ToLua.Push(L, o);
	}

	class Spine_Unity_SkeletonRenderer_InstructionDelegate_Event : LuaDelegate
	{
		public Spine_Unity_SkeletonRenderer_InstructionDelegate_Event(LuaFunction func) : base(func) { }
		public Spine_Unity_SkeletonRenderer_InstructionDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Unity.SkeletonRendererInstruction param0)
		{
			try{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(Spine.Unity.SkeletonRendererInstruction param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public Spine.Unity.SkeletonRenderer.InstructionDelegate Spine_Unity_SkeletonRenderer_InstructionDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			Spine.Unity.SkeletonRenderer.InstructionDelegate fn = delegate(Spine.Unity.SkeletonRendererInstruction param0) { };
			return fn;
		}

		if(!flag)
		{
			Spine_Unity_SkeletonRenderer_InstructionDelegate_Event target = new Spine_Unity_SkeletonRenderer_InstructionDelegate_Event(func);
			Spine.Unity.SkeletonRenderer.InstructionDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			Spine_Unity_SkeletonRenderer_InstructionDelegate_Event target = new Spine_Unity_SkeletonRenderer_InstructionDelegate_Event(func, self);
			Spine.Unity.SkeletonRenderer.InstructionDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_Spine_Unity_SkeletonRenderer_InstructionDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(Spine.Unity.SkeletonRenderer.InstructionDelegate), L, pos);
	}

	void Push_Spine_Unity_SkeletonRenderer_InstructionDelegate(IntPtr L, Spine.Unity.SkeletonRenderer.InstructionDelegate o)
	{
		ToLua.Push(L, o);
	}

	class Spine_Unity_MeshGeneratorDelegate_Event : LuaDelegate
	{
		public Spine_Unity_MeshGeneratorDelegate_Event(LuaFunction func) : base(func) { }
		public Spine_Unity_MeshGeneratorDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Unity.MeshGeneratorBuffers param0)
		{
			try{
			func.BeginPCall();
			func.PushValue(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(Spine.Unity.MeshGeneratorBuffers param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.PushValue(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public Spine.Unity.MeshGeneratorDelegate Spine_Unity_MeshGeneratorDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			Spine.Unity.MeshGeneratorDelegate fn = delegate(Spine.Unity.MeshGeneratorBuffers param0) { };
			return fn;
		}

		if(!flag)
		{
			Spine_Unity_MeshGeneratorDelegate_Event target = new Spine_Unity_MeshGeneratorDelegate_Event(func);
			Spine.Unity.MeshGeneratorDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			Spine_Unity_MeshGeneratorDelegate_Event target = new Spine_Unity_MeshGeneratorDelegate_Event(func, self);
			Spine.Unity.MeshGeneratorDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_Spine_Unity_MeshGeneratorDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(Spine.Unity.MeshGeneratorDelegate), L, pos);
	}

	void Push_Spine_Unity_MeshGeneratorDelegate(IntPtr L, Spine.Unity.MeshGeneratorDelegate o)
	{
		ToLua.Push(L, o);
	}

	class Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event : LuaDelegate
	{
		public Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event(LuaFunction func) : base(func) { }
		public Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Unity.SkeletonRenderer param0)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(Spine.Unity.SkeletonRenderer param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate fn = delegate(Spine.Unity.SkeletonRenderer param0) { };
			return fn;
		}

		if(!flag)
		{
			Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event target = new Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event(func);
			Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event target = new Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event(func, self);
			Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate), L, pos);
	}

	void Push_Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate(IntPtr L, Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate o)
	{
		ToLua.Push(L, o);
	}

	class System_Func_string_bool_Event : LuaDelegate
	{
		public System_Func_string_bool_Event(LuaFunction func) : base(func) { }
		public System_Func_string_bool_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public bool Call(string param0)
		{
			try{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Boolean);
			}
		}

		public bool CallWithSelf(string param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
				return default(System.Boolean);
			}
		}
	}

	public System.Func<string,bool> System_Func_string_bool(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Func<string,bool> fn = delegate(string param0) { return false; };
			return fn;
		}

		if(!flag)
		{
			System_Func_string_bool_Event target = new System_Func_string_bool_Event(func);
			System.Func<string,bool> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Func_string_bool_Event target = new System_Func_string_bool_Event(func, self);
			System.Func<string,bool> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Func_string_bool(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Func<string,bool>), L, pos);
	}

	void Push_System_Func_string_bool(IntPtr L, System.Func<string,bool> o)
	{
		ToLua.Push(L, o);
	}

	class MoonCommonLib_ProcessExtractedFrame_Event : LuaDelegate
	{
		public MoonCommonLib_ProcessExtractedFrame_Event(LuaFunction func) : base(func) { }
		public MoonCommonLib_ProcessExtractedFrame_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.Texture2D param0)
		{
			try{
			func.BeginPCall();
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}

		public void CallWithSelf(UnityEngine.Texture2D param0)
		{
			try{
			func.BeginPCall();
			func.Push(self);
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
			}
			catch(Exception e)
			{
				MDebug.singleton.AddErrorLog(e.ToString());
			}
		}
	}

	public MoonCommonLib.ProcessExtractedFrame MoonCommonLib_ProcessExtractedFrame(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			MoonCommonLib.ProcessExtractedFrame fn = delegate(UnityEngine.Texture2D param0) { };
			return fn;
		}

		if(!flag)
		{
			MoonCommonLib_ProcessExtractedFrame_Event target = new MoonCommonLib_ProcessExtractedFrame_Event(func);
			MoonCommonLib.ProcessExtractedFrame d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			MoonCommonLib_ProcessExtractedFrame_Event target = new MoonCommonLib_ProcessExtractedFrame_Event(func, self);
			MoonCommonLib.ProcessExtractedFrame d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_MoonCommonLib_ProcessExtractedFrame(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(MoonCommonLib.ProcessExtractedFrame), L, pos);
	}

	void Push_MoonCommonLib_ProcessExtractedFrame(IntPtr L, MoonCommonLib.ProcessExtractedFrame o)
	{
		ToLua.Push(L, o);
	}

}

