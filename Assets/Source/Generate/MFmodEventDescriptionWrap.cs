//this source code was auto-generated by tolua#, do not modify it
using System;
using MoonCommonLib;
using LuaInterface;

public class MFmodEventDescriptionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MFmodEventDescription), typeof(System.Object));
		L.RegFunction("getID", getID);
		L.RegFunction("getPath", getPath);
		L.RegFunction("getUserPropertyCount", getUserPropertyCount);
		L.RegFunction("getLength", getLength);
		L.RegFunction("getMinimumDistance", getMinimumDistance);
		L.RegFunction("getMaximumDistance", getMaximumDistance);
		L.RegFunction("getSoundSize", getSoundSize);
		L.RegFunction("isSnapshot", isSnapshot);
		L.RegFunction("isOneshot", isOneshot);
		L.RegFunction("isStream", isStream);
		L.RegFunction("is3D", is3D);
		L.RegFunction("isValid", isValid);
		L.RegFunction("hasCue", hasCue);
		L.RegFunction("createInstance", createInstance);
		L.RegFunction("getInstanceCount", getInstanceCount);
		L.RegFunction("getInstanceList", getInstanceList);
		L.RegFunction("loadSampleData", loadSampleData);
		L.RegFunction("unloadSampleData", unloadSampleData);
		L.RegFunction("releaseAllInstances", releaseAllInstances);
		L.RegFunction("getUserData", getUserData);
		L.RegFunction("setUserData", setUserData);
		L.RegFunction("New", _CreateMFmodEventDescription);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("description", get_description, null);
		L.RegVar("Deprecated", get_Deprecated, set_Deprecated);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMFmodEventDescription(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FMOD.Studio.EventDescription arg0 = StackTraits<FMOD.Studio.EventDescription>.Check(L, 1);
				MFmodEventDescription obj = new MFmodEventDescription(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MFmodEventDescription.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			System.Guid o = obj.getID();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			string o = obj.getPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getUserPropertyCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			int o = obj.getUserPropertyCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			int o = obj.getLength();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getMinimumDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			float o = obj.getMinimumDistance();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getMaximumDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			float o = obj.getMaximumDistance();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getSoundSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			float o = obj.getSoundSize();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isSnapshot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			bool o = obj.isSnapshot();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isOneshot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			bool o = obj.isOneshot();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			bool o = obj.isStream();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int is3D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			bool o = obj.is3D();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isValid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			bool o = obj.isValid();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int hasCue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			bool o = obj.hasCue();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int createInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			MoonCommonLib.IMFModEventInstance o = obj.createInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getInstanceCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			int o = obj.getInstanceCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getInstanceList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			MoonCommonLib.IMFModEventInstance[] o = obj.getInstanceList();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadSampleData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			obj.loadSampleData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int unloadSampleData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			obj.unloadSampleData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int releaseAllInstances(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			obj.releaseAllInstances();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getUserData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			System.IntPtr o = obj.getUserData();
			LuaDLL.lua_pushlightuserdata(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUserData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFmodEventDescription obj = (MFmodEventDescription)ToLua.CheckObject<MFmodEventDescription>(L, 1);
			System.IntPtr arg0 = ToLua.CheckIntPtr(L, 2);
			obj.setUserData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_description(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)o;
			FMOD.Studio.EventDescription ret = obj.description;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index description on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Deprecated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)o;
			bool ret = obj.Deprecated;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Deprecated on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Deprecated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFmodEventDescription obj = (MFmodEventDescription)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Deprecated = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Deprecated on a nil value");
		}
	}
}

