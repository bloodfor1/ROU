//this source code was auto-generated by tolua#, do not modify it
using System;
using MoonCommonLib;
using LuaInterface;

public class MFModEventInstanceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MFModEventInstance), typeof(System.Object));
		L.RegFunction("getPath", getPath);
		L.RegFunction("getDescription", getDescription);
		L.RegFunction("getVolume", getVolume);
		L.RegFunction("setVolume", setVolume);
		L.RegFunction("getPitch", getPitch);
		L.RegFunction("setPitch", setPitch);
		L.RegFunction("get3DAttributes", get3DAttributes);
		L.RegFunction("set3DAttributes", set3DAttributes);
		L.RegFunction("getListenerMask", getListenerMask);
		L.RegFunction("setListenerMask", setListenerMask);
		L.RegFunction("getReverbLevel", getReverbLevel);
		L.RegFunction("setReverbLevel", setReverbLevel);
		L.RegFunction("getPaused", getPaused);
		L.RegFunction("setPaused", setPaused);
		L.RegFunction("start", start);
		L.RegFunction("stop", stop);
		L.RegFunction("getTimelinePosition", getTimelinePosition);
		L.RegFunction("setTimelinePosition", setTimelinePosition);
		L.RegFunction("release", release);
		L.RegFunction("isVirtual", isVirtual);
		L.RegFunction("getParameterValue", getParameterValue);
		L.RegFunction("setParameterValue", setParameterValue);
		L.RegFunction("triggerCue", triggerCue);
		L.RegFunction("New", _CreateMFModEventInstance);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("instance", get_instance, null);
		L.RegVar("Deprecated", get_Deprecated, set_Deprecated);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMFModEventInstance(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FMOD.Studio.EventInstance arg0 = StackTraits<FMOD.Studio.EventInstance>.Check(L, 1);
				MFModEventInstance obj = new MFModEventInstance(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MFModEventInstance.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			string o = obj.getPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getDescription(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			MoonCommonLib.IMFmodEventDescription o = obj.getDescription();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			float arg0;
			float arg1;
			obj.getVolume(out arg0, out arg1);
			LuaDLL.lua_pushnumber(L, arg0);
			LuaDLL.lua_pushnumber(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.setVolume(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPitch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			float arg0;
			float arg1;
			obj.getPitch(out arg0, out arg1);
			LuaDLL.lua_pushnumber(L, arg0);
			LuaDLL.lua_pushnumber(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPitch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.setPitch(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get3DAttributes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			MoonCommonLib.ATTRIBUTES_3D o = obj.get3DAttributes();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set3DAttributes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			MoonCommonLib.ATTRIBUTES_3D arg0 = StackTraits<MoonCommonLib.ATTRIBUTES_3D>.Check(L, 2);
			obj.set3DAttributes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getListenerMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			uint arg0;
			obj.getListenerMask(out arg0);
			LuaDLL.lua_pushnumber(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setListenerMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			uint arg0 = (uint)(ulong)LuaDLL.luaL_checknumber(L, 2);
			obj.setListenerMask(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getReverbLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1;
			obj.getReverbLevel(arg0, out arg1);
			LuaDLL.lua_pushnumber(L, arg1);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setReverbLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.setReverbLevel(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPaused(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			bool arg0;
			obj.getPaused(out arg0);
			LuaDLL.lua_pushboolean(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPaused(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.setPaused(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			obj.start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.stop(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getTimelinePosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			int arg0;
			obj.getTimelinePosition(out arg0);
			LuaDLL.lua_pushinteger(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTimelinePosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setTimelinePosition(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			obj.release();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isVirtual(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			bool arg0;
			obj.isVirtual(out arg0);
			LuaDLL.lua_pushboolean(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getParameterValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			float arg1;
			float arg2;
			obj.getParameterValue(arg0, out arg1, out arg2);
			LuaDLL.lua_pushnumber(L, arg1);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setParameterValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.setParameterValue(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int triggerCue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MFModEventInstance obj = (MFModEventInstance)ToLua.CheckObject<MFModEventInstance>(L, 1);
			obj.triggerCue();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFModEventInstance obj = (MFModEventInstance)o;
			FMOD.Studio.EventInstance ret = obj.instance;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index instance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Deprecated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFModEventInstance obj = (MFModEventInstance)o;
			bool ret = obj.Deprecated;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Deprecated on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Deprecated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFModEventInstance obj = (MFModEventInstance)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Deprecated = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Deprecated on a nil value");
		}
	}
}

